---
layout: blog-template
title: 烂代码外科手术分享
---

#烂代码外科手术分享

##好代码和烂代码区分在哪里

- 先把业务的需求想清楚，
- 设计好清晰明确的调用接口，
- 用最简单的、最短距离的代码实现。

*“好代码”放到不合适的地方，它就可能会变成烂代码*

	—  满足业务的需求，就是基本的功能的实现，不能工作的代码，就是废物，已经不需要讨论好坏的问题了，所以完成功能，是最基本，最低的要求
	—   —— 看代码，好比看文章，首先是段落标点，分行分段，且不说代码里面的逻辑，当从直接的风格，缩进，是否有统一的代码风格，如果这个都没有做到，
			代码再好，格式乱七八糟的，也没人愿意去看，更不用说维护了，这种代码已经无法称之为好代码了，前端代码标准参考[http://www.2cto.com/kf/201207/139043.html][http://www.haogongju.net/art/1633643]
		—— 代码结构清晰，模式设计合理，调用的接口明确，且符合大众的使用习惯，有文档清楚列出接口的明细，其他功能维护的同事能很快读懂，且修改便利，
		—— 不要轻易去认定一段代码是表面看上去那么烂，没有了解整个程序的方案之前，无法轻易的判断代码的好坏，参考[http://parazzi.me/2011/06/write-your-code-sucks.html]
		—— 我之前做的一个保险后台的页面可以归类这种格式“乱七八糟”，仅仅满足业务需求的行列（展示之前的这段代码，归纳出代码的种种问题）；
		–– 优雅的代码，参考[http://kb.cnblogs.com/page/82643/]
		–– 前端代码的好习惯，参考[http://hi.baidu.com/hzy888_2010/item/6bcb80cfdd9a592fe80f2e22]
		–– 扩展性，web前端的弱架构导致的代码污染[http://www.webjx.com/web/xindejiqiao-16164.html]
	—  代码的逻辑简单直接，
		—— 前端代码的灵活，同样的功能，可以用不同的方式来实现，如果没有规范，后期项目会难以维护，性能也会越来越差
	—  工作中重构代码的机会并不多，要珍惜“写烂代码的机会”，认识到不足，积极去改变，自己业余写的代码，要积累和积极优化