---
layout: blog-template
title: 烂代码外科手术分享
---

#烂代码外科手术分享

##好代码和烂代码区分在哪里

- 满足业务需求，完成功能;
- 代码风格统一（规范合理进行分行、缩进、空格），注释完整;
— 模式的选择和代码设计,考虑好适合的模式来进行开发，是好代码实现的前提;
— 设计好清晰明确的调用接口，简单有效的成员设置;
- 代码实现用最简单的、最短距离;
— ……

##我的代码的改进过程，几个项目或者日常：

###从去年年底开发的保险后台项目，
####时隔大半年，现在回头看看当初的保险后台项目的代码，基本情况如下
 1. 功能都能实现，不得不庆幸有这样的后台页面作为练手的机会；
 2. 代码没有规范，缩进不统一，没能合理使用空格，注释不完整；
 3. 每个函数都有功能的描述，没有对函数参数的注释；
 4. 开头没有对整个代码有完整的必要的概述；
 5. 结构与数据没有分离；
 6. 对代码没有设计，没有功能上的模块区分，纯面向过程的编码；
 7.  ……
####总结：阅读和维护，都是一件令人头痛的事情，因为已经有上述问题了，已经可以把这个代码定论为烂代码。


###到瀑布流的开发和重构；
 1. 有必要的完整的注释，有参数的函数，对参数有注释描述；
 2. 代码风格统一，私用成员和公用成员用下划线区分，基本符合jslint的风格；
 3. 使用构造函数、单体等模式，对闭包的理解和使用；
 4. 使用模板引擎，数据和展示分离；
 5. 初始化实例的基本参数使用方式简练；
 6. 接口支持事件；
 
##怎么样保持自己的代码是好代码
 1. 同样的代码结构或者设计，放到不同的场景，好代码也会变成烂代码；
 2. 熟练掌握常用的设计模式，熟悉其适用的场景，在合适的场景使用合适的模式；
 3. 共同开发项目的时候，制定并且遵守好代码的开发规范；
 4. 以易读和维护性作为代码开发的硬性指标，预留好满足当前需求以外的合理扩展空间；
 

##关于好代码烂代码的相关文章
 1. 代码规范[http://www.haogongju.net/art/1633643]
 2. 不要轻易去认定一段代码是表面看上去那么烂，没有了解整个程序的方案之前，无法轻易的判断代码的好坏，参考[http://parazzi.me/2011/06/write-your-code-sucks.html]
 3. 优雅的代码[http://kb.cnblogs.com/page/82643/]
 4. web前端的弱架构导致的代码污染[http://www.webjx.com/web/xindejiqiao-16164.html]

##我的话
 1. 重构代码的机会并不多，要珍惜“写烂代码的机会”，认识到不足，积极去改变，自己写的代码，要注意积累和积极优化
 
##end

